"use strict";(self.webpackChunkasbplayer_docs=self.webpackChunkasbplayer_docs||[]).push([[519],{8453:(e,t,i)=>{i.d(t,{R:()=>l,x:()=>o});var n=i(6540);const s={},r=n.createContext(s);function l(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(r.Provider,{value:t},e.children)}},9835:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"guides/subtitle-text-filtering","title":"Subtitle text filtering","description":"If you\'d like to filter out specific instances subtitle text, one way to do so is by using a regular expression (regex). asbplayer can match any sequence following a specified regex pattern and remove the matches.","source":"@site/docs/guides/subtitle-text-filtering.md","sourceDirName":"guides","slug":"/guides/subtitle-text-filtering","permalink":"/asbplayer-docs/docs/guides/subtitle-text-filtering","draft":false,"unlisted":false,"editUrl":"https://github.com/killergerbah/asbplayer-docs/tree/main/packages/create-docusaurus/templates/shared/docs/guides/subtitle-text-filtering.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"One-click mining","permalink":"/asbplayer-docs/docs/guides/one-click-mining"},"next":{"title":"Community guides","permalink":"/asbplayer-docs/docs/guides/community-guides"}}');var s=i(4848),r=i(8453);const l={sidebar_position:5},o="Subtitle text filtering",a={},c=[{value:"Configure the regex filter",id:"configure-the-regex-filter",level:2},{value:"Useful examples of regular expressions",id:"useful-examples-of-regular-expressions",level:3},{value:"<code>([\\(\uff08]([^\\(\\)\uff08\uff09]|(([\\(\uff08][^\\(\\)\uff08\uff09]+[\\)\uff09])))+[\\)\uff09])</code>",id:"",level:4},{value:"<code>(.*)\\n+(?!-)(.*)</code>",id:"n-",level:4},{value:"<code>-?\\[.*\\]</code>",id:"-",level:4},{value:"<code>^[\\-\\(\\)\\.\\s\\p{Lu}]+$</code>",id:"-splu",level:4},{value:"<code>[\u266a\u266c#\uff5e\u301c]+</code>",id:"-1",level:4},{value:"Combining regexes",id:"combining-regexes",level:3},{value:"Learn",id:"learn",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"subtitle-text-filtering",children:"Subtitle text filtering"})}),"\n",(0,s.jsx)(t.p,{children:"If you'd like to filter out specific instances subtitle text, one way to do so is by using a regular expression (regex). asbplayer can match any sequence following a specified regex pattern and remove the matches."}),"\n",(0,s.jsx)(t.h2,{id:"configure-the-regex-filter",children:"Configure the regex filter"}),"\n",(0,s.jsxs)(t.p,{children:["Under the ",(0,s.jsx)(t.a,{href:"https://killergerbah.github.io/asbplayer/?view=settings#misc-settings",children:"misc"}),' section in asbplayer settings, locate the "Subtitle regex filter" textbox. Enter an appropriate regex to filter desired content.\nYou can replace filtered content similarly by entering a string into the "Subtitle regex filter text replacement" textbox. Leaving this blank will simply remove the content.']}),"\n",(0,s.jsx)(t.h3,{id:"useful-examples-of-regular-expressions",children:"Useful examples of regular expressions"}),"\n",(0,s.jsx)(t.h4,{id:"",children:(0,s.jsx)(t.code,{children:"([\\(\uff08]([^\\(\\)\uff08\uff09]|(([\\(\uff08][^\\(\\)\uff08\uff09]+[\\)\uff09])))+[\\)\uff09])"})}),"\n",(0,s.jsxs)(t.p,{children:['Remove names enclosed by parenthesis to indicate speakers (e.g. "',(0,s.jsx)(t.strong,{children:"\uff08\u5c71\u7530\uff09"}),'\u3000\u5143\u6c17\u3067\u3059\u304b\uff1f")']}),"\n",(0,s.jsx)(t.h4,{id:"n-",children:(0,s.jsx)(t.code,{children:"(.*)\\n+(?!-)(.*)"})}),"\n",(0,s.jsxs)(t.p,{children:["Some subtitles are split in several lines and this regex forces them into a single line. For this filter to work, you must also put ",(0,s.jsx)(t.code,{children:"$1 $2"}),' in the "Subtitle regex filter text replacement" field.']}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"NB"}),": When using this regex pattern in combination with other patterns (using the ",(0,s.jsx)(t.code,{children:"|"})," operator, see below), place this pattern at the end. This ensures that all other regex transformations are applied first, and then the results are finally combined into a single line."]}),"\n",(0,s.jsx)(t.h4,{id:"-",children:(0,s.jsx)(t.code,{children:"-?\\[.*\\]"})}),"\n",(0,s.jsxs)(t.p,{children:['Remove indications enclosed by square brackets that sound or music that is playing (e.g. "',(0,s.jsx)(t.strong,{children:"[PLAYFUL MUSIC]"}),'" or "',(0,s.jsx)(t.strong,{children:"-[GASPS]"}),'")']}),"\n",(0,s.jsx)(t.h4,{id:"-splu",children:(0,s.jsx)(t.code,{children:"^[\\-\\(\\)\\.\\s\\p{Lu}]+$"})}),"\n",(0,s.jsxs)(t.p,{children:['As an alternative to the above, filter out descriptions written in capital letters, but without the square brackets (e.g. "',(0,s.jsx)(t.strong,{children:"PLAYFUL MUSIC"}),'"). If your language has additional letters with diacritics, you feel free to add them to this list.']}),"\n",(0,s.jsx)(t.h4,{id:"-1",children:(0,s.jsx)(t.code,{children:"[\u266a\u266c#\uff5e\u301c]+"})}),"\n",(0,s.jsxs)(t.p,{children:["Any combination of symbols on their own that represent playing music (e.g. ",(0,s.jsx)(t.code,{children:"\u266a\u266c\u266a"}),")"]}),"\n",(0,s.jsx)(t.h3,{id:"combining-regexes",children:"Combining regexes"}),"\n",(0,s.jsxs)(t.p,{children:["Regular expressions can be combined with the character ",(0,s.jsx)(t.code,{children:"|"})," (no spaces needed inbetween). E.g., if you want to use the two regexes from the list above, you can use ",(0,s.jsx)(t.code,{children:"-?\\[.*\\]|[\u266a\u266c#\uff5e\u301c]+"}),". You can combine as many regexes as you wish this way."]}),"\n",(0,s.jsx)(t.h2,{id:"learn",children:"Learn"}),"\n",(0,s.jsxs)(t.p,{children:["Learn how to write and test custom regular expressions at ",(0,s.jsx)(t.a,{href:"https://regexlearn.com/playground",children:"Regex Learn - Playground"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);